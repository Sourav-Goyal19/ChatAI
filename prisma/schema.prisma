generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkId       String         @unique
  name          String?
  email         String?
  avatarUrl     String?
  conversations Conversation[]
  files         File[]
  memories      Memory[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Conversation {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String?
  model             String?
  contextWindowSize Int?
  lastActivityAt    DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [clerkId])
  messages          Message[]
  contextSegments   ContextSegment[]
  versionGroups     VersionGroup[]
}

model VersionGroup {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  versions       String[]     @db.ObjectId
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  messages       Message[]
}

enum Role {
  user
  assistant
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  versionGroupId String       @db.ObjectId
  sender         String
  content        String
  role           Role
  files          String[]     @db.ObjectId
  streaming      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  versionGroup   VersionGroup @relation(fields: [versionGroupId], references: [id])
}

model File {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  conversationId  String?  @db.ObjectId
  messageId       String?  @db.ObjectId
  fileName        String
  fileType        String
  size            Int
  storageProvider String
  storageUrl      String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [clerkId])
}

model Memory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  key       String
  value     String
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [clerkId])
}

model ContextSegment {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  segmentIndex   Int
  messages       String[]     @db.ObjectId
  tokenCount     Int
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
