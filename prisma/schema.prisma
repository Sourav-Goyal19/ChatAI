// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkId       String         @unique
  name          String
  email         String
  avatarUrl     String?
  conversations Conversation[]
  files         File[]
  memories      Memory[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Conversation {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  userId            String           @db.ObjectId
  title             String?
  model             String?
  contextWindowSize Int?
  lastActivityAt    DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation(fields: [userId], references: [id])
  messages          Message[]
  contextSegments   ContextSegment[]
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String        @db.ObjectId
  sender         String
  content        String
  role           String
  files          String[]      @db.ObjectId
  edited         Boolean       @default(false)
  editHistory    EditHistory[]
  streaming      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
}

type EditHistory {
  content  String
  editedAt DateTime
}

model File {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  conversationId  String?  @db.ObjectId
  messageId       String?  @db.ObjectId
  fileName        String
  fileType        String
  size            Int
  storageProvider String
  storageUrl      String
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model Memory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  key       String
  value     String
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ContextSegment {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  segmentIndex   Int
  messages       String[]     @db.ObjectId
  tokenCount     Int
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
